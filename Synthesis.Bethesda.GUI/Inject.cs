using System;
using Mutagen.Bethesda.Synthesis.Versioning;
using Mutagen.Bethesda.Synthesis.WPF;
using Serilog;
using StructureMap;
using Synthesis.Bethesda.Execution.GitRespository;
using Synthesis.Bethesda.Execution.Versioning;
using Synthesis.Bethesda.GUI.Services;
using Synthesis.Bethesda.GUI.Settings;
using Synthesis.Bethesda.GUI.Temporary;

namespace Synthesis.Bethesda.GUI
{
    public class Inject
    {
        private ConfigurationExpression _coll = null!;
        public static Container Container { get; private set; } = null!;

        public Inject(Action<ConfigurationExpression> toAdd)
        {
            Container = new Container(c =>
            {
                _coll = c;
                Configure();
                toAdd(c);
            });
            var logging = Container.GetInstance<ILogger>();
#if DEBUG
            Container.AssertConfigurationIsValid();
            logging.Information(Container.WhatDidIScan());
            logging.Information(Container.WhatDoIHave());
#endif
        }
        
        private void Configure()
        {
            RegisterBaseLib();
            
            RegisterCurrentLib();

            RegisterWpfLib();
            
            RegisterExecutionLib();
        }

        private void RegisterCurrentLib()
        {
            _coll.ForSingletonOf<MainVM>();
            _coll.ForSingletonOf<ConfigurationVM>();
            _coll.ForSingletonOf<CliPatcherInitVM>();
            _coll.ForSingletonOf<PatcherInitializationVM>();
            _coll.ForSingletonOf<ILogger>().Use(Log.Logger);
            _coll.Scan(s =>
            {
                s.AssemblyContainingType<IEnvironmentErrorVM>();
                s.AddAllTypesOf<IEnvironmentErrorVM>();
            });
            
            _coll.For<ILockToCurrentVersioning>().Use<LockToCurrentVersioning>().ContainerScoped();
            _coll.For<IProfileDisplayControllerVm>().Use<ProfileDisplayControllerVm>().ContainerScoped();
            _coll.For<IEnvironmentErrorsVM>().Use<EnvironmentErrorsVM>().ContainerScoped();
            _coll.For<IRemovePatcherFromProfile>().Use<ProfilePatchersList>().ContainerScoped();
            _coll.For<ProfilePatchersList>().ContainerScoped();
            _coll.For<ProfileIdentifier>().ContainerScoped();
            _coll.For<ProfileLoadOrder>().ContainerScoped();
            _coll.For<ProfileDirectories>().ContainerScoped();
            _coll.For<ProfileDataFolder>().ContainerScoped();
            _coll.For<ProfileVersioning>().ContainerScoped();
            _coll.For<ProfileSimpleLinkCache>().ContainerScoped();
            
            _coll.Scan(s =>
            {
                s.AssemblyContainingType<INavigateTo>();
                s.IncludeNamespaceContainingType<INavigateTo>();
                s.WithDefaultConventions();
            });
            _coll.ForSingletonOf<ISettingsSingleton>().Use<SettingsSingleton>();
            _coll.ForSingletonOf<IShowHelpSetting>().Use<ShowHelpSetting>();
            _coll.ForSingletonOf<IConsiderPrereleasePreference>().Use<ConsiderPrereleasePreference>();
            _coll.ForSingletonOf<IRetrieveSaveSettings>().Use<RetrieveSaveSettings>();
            _coll.ForSingletonOf<IConfirmationPanelControllerVm>().Use<ConfirmationPanelControllerVm>();
            _coll.ForSingletonOf<ISelectedProfileControllerVm>().Use<SelectedProfileControllerVm>();
            _coll.ForSingletonOf<IActivePanelControllerVm>().Use<ActivePanelControllerVm>();
            _coll.ForSingletonOf<ISaveSignal>().Use<RetrieveSaveSettings>();
        }

        private void RegisterBaseLib()
        {
            _coll.Scan(s =>
            {
                s.AssemblyContainingType<IProvideCurrentVersions>(); 
                s.IncludeNamespaceContainingType<IProvideCurrentVersions>();
                s.WithDefaultConventions();
            });
        }

        private void RegisterWpfLib()
        {
            _coll.Scan(s =>
            {
                s.AssemblyContainingType<IProvideAutogeneratedSettings>();
                s.IncludeNamespaceContainingType<IProvideAutogeneratedSettings>();
                s.WithDefaultConventions();
            });
        }

        private void RegisterExecutionLib()
        {
            _coll.ForSingletonOf<IProvideRepositoryCheckouts>().Use<ProvideRepositoryCheckouts>();
            
            _coll.Scan(s =>
            {
                s.AssemblyContainingType<ICheckOrCloneRepo>();
                s.ExcludeType<ProvideRepositoryCheckouts>();
                s.WithDefaultConventions();
            });
        }
    }
}