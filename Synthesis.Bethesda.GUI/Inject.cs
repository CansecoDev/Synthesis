using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda.Synthesis.WPF;
using Noggog;
using Serilog;
using SimpleInjector;
using Synthesis.Bethesda.Execution.CLI;
using Synthesis.Bethesda.Execution.DotNet;
using Synthesis.Bethesda.Execution.GitRespository;
using Synthesis.Bethesda.GUI.Services;

namespace Synthesis.Bethesda.GUI
{
    public class Inject
    {
        private Container _coll = new();
        public readonly static Scope Scope;
        public readonly static Container Container;

        static Inject()
        {
            var inject = new Inject();
            inject.Configure();
            Container = inject._coll;
            Scope = new Scope(Container);
        }
        
        private void Configure()
        {
            _coll.Options.DefaultLifestyle = Lifestyle.Scoped;
            _coll.Options.DefaultScopedLifestyle = ScopedLifestyle.Flowing;
            
            RegisterCurrentLib();

            RegisterWpfLib();
            
            RegisterExecutionLib();
            
        }

        private void RegisterCurrentLib()
        {
            _coll.RegisterInstance(Log.Logger);
            _coll.Register<IEnvironmentErrorsVM, EnvironmentErrorsVM>();
            _coll.Collection.Register<IEnvironmentErrorVM>(
                typeof(IEnvironmentErrorVM).Assembly.AsEnumerable());

            RegisterNamespaceFromType(typeof(IProvideInstalledSdk));
        }

        private void RegisterWpfLib()
        {
            RegisterNamespaceFromType(typeof(IProvideAutogeneratedSettings));
        }

        private void RegisterExecutionLib()
        {
            _coll.Register<IProvideRepositoryCheckouts, ProvideRepositoryCheckouts>(Lifestyle.Singleton);

            RegisterMatchingInterfaces(
                from type in typeof(ICheckOrCloneRepo).Assembly.GetExportedTypes()
                where type != typeof(ProvideRepositoryCheckouts)
                select type);
        }

        private void RegisterNamespaceFromType(Type type)
        {
            RegisterMatchingInterfaces(
                from t in type.Assembly.GetExportedTypes()
                where t.Namespace!.StartsWith(type.Namespace!)
                select t);
        }

        private void RegisterMatchingInterfaces(IEnumerable<Type> types)
        {
            foreach (var type in types)
            {
                RegisterMatchingInterfaces(type);
            }
        }

        private void RegisterMatchingInterfaces(Type type)
        {
            type.GetInterfaces()
                .Where(i => IsMatchingInterface(i, type))
                .ForEach(i =>
                {
                    _coll.Register(i, type);
                });
        }

        private bool IsMatchingInterface(Type interf, Type concrete)
        {
            return interf.Name == $"I{concrete.Name}";
        }
    }
}