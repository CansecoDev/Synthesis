using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Noggog.Utility;
using Serilog;
using Synthesis.Bethesda.DTO;

namespace Synthesis.Bethesda.Execution.CLI
{
    public interface IGetSettingsStyle
    {
        Task<SettingsConfiguration> Get(
            string path,
            bool directExe,
            CancellationToken cancel,
            bool build);
    }

    public class GetSettingsStyle : IGetSettingsStyle
    {
        private readonly ILogger _Logger;
        private readonly IProcessFactory _ProcessFactory;
        private readonly IProvideDotNetProcessInfo _GetProcessInfo;

        public GetSettingsStyle(
            ILogger logger,
            IProcessFactory processFactory,
            IProvideDotNetProcessInfo getProcessInfo)
        {
            _Logger = logger;
            _ProcessFactory = processFactory;
            _GetProcessInfo = getProcessInfo;
        }
        
        public async Task<SettingsConfiguration> Get(
            string path,
            bool directExe,
            CancellationToken cancel,
            bool build)
        {
            _Logger.Information($"Checking for settings.  Direct exe? {directExe}.  Build? {build}");
            using var proc = _ProcessFactory.Create(
                _GetProcessInfo.GetStart(path, directExe, new Synthesis.Bethesda.SettingsQuery(), build: build),
                cancel: cancel,
                hookOntoOutput: true);

            List<string> output = new();
            using var outputSub = proc.Output
                .Subscribe(s => output.Add(s));

            var code = (Codes)await proc.Run();
            switch (code)
            {
                case Codes.OpensForSettings:
                    return new SettingsConfiguration(SettingsStyle.Open, Array.Empty<ReflectionSettingsConfig>());
                case Codes.AutogeneratedSettingsClass:
                    return new SettingsConfiguration(
                        SettingsStyle.SpecifiedClass,
                        JsonConvert.DeserializeObject<ReflectionSettingsConfigs>(
                            string.Join(Environment.NewLine, output))!.Configs);
                default:
                    return new SettingsConfiguration(SettingsStyle.None, Array.Empty<ReflectionSettingsConfig>());
            }
        }
    }
}